<?php

/**
 * This is the model base class for the table "pub".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Pub".
 *
 * Columns in table "pub" available as properties of the model,
 * followed by relations of table "pub" available as properties of the model.
 *
 * @property integer $pub_id
 * @property string $title
 * @property string $volumetitle
 * @property string $volume
 * @property string $series_name
 * @property string $issue
 * @property string $pyear
 * @property string $pages
 * @property string $miniref
 * @property string $uniquename
 * @property integer $type_id
 * @property boolean $is_obsolete
 * @property string $publisher
 * @property string $pubplace
 *
 * @property FeaturelocPub[] $featurelocPubs
 * @property ProjectPub[] $projectPubs
 * @property FeatureRelationshippropPub[] $featureRelationshippropPubs
 * @property Protocol[] $protocols
 * @property Pubauthor[] $pubauthors
 * @property PubDbxref[] $pubDbxrefs
 * @property Study[] $studies
 * @property Cvterm $type
 * @property Pubprop[] $pubprops
 * @property PubRelationship[] $pubRelationships
 * @property PubRelationship[] $pubRelationships1
 * @property FeatureSynonym[] $featureSynonyms
 * @property FeaturepropPub[] $featurepropPubs
 * @property FeatureRelationshipPub[] $featureRelationshipPubs
 * @property FeatureCvterm[] $featureCvterms
 * @property FeaturePub[] $featurePubs
 * @property FeatureCvtermPub[] $featureCvtermPubs
 */
abstract class BasePub extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'pub';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Pub|Pubs', $n);
	}

	public static function representingColumn() {
		return 'uniquename';
	}

	public function rules() {
		return array(
			array('uniquename, type_id', 'required'),
			array('type_id', 'numerical', 'integerOnly'=>true),
			array('volume, series_name, issue, pyear, pages, miniref, publisher, pubplace', 'length', 'max'=>255),
			array('title, volumetitle, is_obsolete', 'safe'),
			array('title, volumetitle, volume, series_name, issue, pyear, pages, miniref, is_obsolete, publisher, pubplace', 'default', 'setOnEmpty' => true, 'value' => null),
			array('pub_id, title, volumetitle, volume, series_name, issue, pyear, pages, miniref, uniquename, type_id, is_obsolete, publisher, pubplace', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'featurelocPubs' => array(self::HAS_MANY, 'FeaturelocPub', 'pub_id'),
			'projectPubs' => array(self::HAS_MANY, 'ProjectPub', 'pub_id'),
			'featureRelationshippropPubs' => array(self::HAS_MANY, 'FeatureRelationshippropPub', 'pub_id'),
			'protocols' => array(self::HAS_MANY, 'Protocol', 'pub_id'),
			'pubauthors' => array(self::HAS_MANY, 'Pubauthor', 'pub_id'),
			'pubDbxrefs' => array(self::HAS_MANY, 'PubDbxref', 'pub_id'),
			'studies' => array(self::HAS_MANY, 'Study', 'pub_id'),
			'type' => array(self::BELONGS_TO, 'Cvterm', 'type_id'),
			'pubprops' => array(self::HAS_MANY, 'Pubprop', 'pub_id'),
			'pubRelationships' => array(self::HAS_MANY, 'PubRelationship', 'object_id'),
			'pubRelationships1' => array(self::HAS_MANY, 'PubRelationship', 'subject_id'),
			'featureSynonyms' => array(self::HAS_MANY, 'FeatureSynonym', 'pub_id'),
			'featurepropPubs' => array(self::HAS_MANY, 'FeaturepropPub', 'pub_id'),
			'featureRelationshipPubs' => array(self::HAS_MANY, 'FeatureRelationshipPub', 'pub_id'),
			'featureCvterms' => array(self::HAS_MANY, 'FeatureCvterm', 'pub_id'),
			'featurePubs' => array(self::HAS_MANY, 'FeaturePub', 'pub_id'),
			'featureCvtermPubs' => array(self::HAS_MANY, 'FeatureCvtermPub', 'pub_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'pub_id' => Yii::t('app', 'Pub'),
			'title' => Yii::t('app', 'Title'),
			'volumetitle' => Yii::t('app', 'Volumetitle'),
			'volume' => Yii::t('app', 'Volume'),
			'series_name' => Yii::t('app', 'Series Name'),
			'issue' => Yii::t('app', 'Issue'),
			'pyear' => Yii::t('app', 'Pyear'),
			'pages' => Yii::t('app', 'Pages'),
			'miniref' => Yii::t('app', 'Miniref'),
			'uniquename' => Yii::t('app', 'Uniquename'),
			'type_id' => null,
			'is_obsolete' => Yii::t('app', 'Is Obsolete'),
			'publisher' => Yii::t('app', 'Publisher'),
			'pubplace' => Yii::t('app', 'Pubplace'),
			'featurelocPubs' => null,
			'projectPubs' => null,
			'featureRelationshippropPubs' => null,
			'protocols' => null,
			'pubauthors' => null,
			'pubDbxrefs' => null,
			'studies' => null,
			'type' => null,
			'pubprops' => null,
			'pubRelationships' => null,
			'pubRelationships1' => null,
			'featureSynonyms' => null,
			'featurepropPubs' => null,
			'featureRelationshipPubs' => null,
			'featureCvterms' => null,
			'featurePubs' => null,
			'featureCvtermPubs' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('pub_id', $this->pub_id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('volumetitle', $this->volumetitle, true);
		$criteria->compare('volume', $this->volume, true);
		$criteria->compare('series_name', $this->series_name, true);
		$criteria->compare('issue', $this->issue, true);
		$criteria->compare('pyear', $this->pyear, true);
		$criteria->compare('pages', $this->pages, true);
		$criteria->compare('miniref', $this->miniref, true);
		$criteria->compare('uniquename', $this->uniquename, true);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('is_obsolete', $this->is_obsolete);
		$criteria->compare('publisher', $this->publisher, true);
		$criteria->compare('pubplace', $this->pubplace, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}