<?php

/**
 * This is the model base class for the table "analysis".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Analysis".
 *
 * Columns in table "analysis" available as properties of the model,
 * followed by relations of table "analysis" available as properties of the model.
 *
 * @property integer $analysis_id
 * @property string $name
 * @property string $description
 * @property string $program
 * @property string $programversion
 * @property string $algorithm
 * @property string $sourcename
 * @property string $sourceversion
 * @property string $sourceuri
 * @property string $timeexecuted
 *
 * @property Analysisfeature[] $analysisfeatures
 * @property Analysisprop[] $analysisprops
 * @property Quantification[] $quantifications
 * @property Expressionresult[] $expressionresults
 */
abstract class BaseAnalysis extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'analysis';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Analysis|Analysises', $n);
	}

	public static function representingColumn() {
		return 'program';
	}

	public function rules() {
		return array(
			array('program, programversion, timeexecuted', 'required'),
			array('name, program, programversion, algorithm, sourcename, sourceversion', 'length', 'max'=>255),
			array('description, sourceuri', 'safe'),
			array('name, description, algorithm, sourcename, sourceversion, sourceuri', 'default', 'setOnEmpty' => true, 'value' => null),
			array('analysis_id, name, description, program, programversion, algorithm, sourcename, sourceversion, sourceuri, timeexecuted', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'analysisfeatures' => array(self::HAS_MANY, 'Analysisfeature', 'analysis_id'),
			'analysisprops' => array(self::HAS_MANY, 'Analysisprop', 'analysis_id'),
			'quantifications' => array(self::HAS_MANY, 'Quantification', 'analysis_id'),
			'expressionresults' => array(self::HAS_MANY, 'Expressionresult', 'analysis_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'analysis_id' => Yii::t('app', 'Analysis'),
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'program' => Yii::t('app', 'Program'),
			'programversion' => Yii::t('app', 'Programversion'),
			'algorithm' => Yii::t('app', 'Algorithm'),
			'sourcename' => Yii::t('app', 'Sourcename'),
			'sourceversion' => Yii::t('app', 'Sourceversion'),
			'sourceuri' => Yii::t('app', 'Sourceuri'),
			'timeexecuted' => Yii::t('app', 'Timeexecuted'),
			'analysisfeatures' => null,
			'analysisprops' => null,
			'quantifications' => null,
			'expressionresults' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('analysis_id', $this->analysis_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('program', $this->program, true);
		$criteria->compare('programversion', $this->programversion, true);
		$criteria->compare('algorithm', $this->algorithm, true);
		$criteria->compare('sourcename', $this->sourcename, true);
		$criteria->compare('sourceversion', $this->sourceversion, true);
		$criteria->compare('sourceuri', $this->sourceuri, true);
		$criteria->compare('timeexecuted', $this->timeexecuted, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}