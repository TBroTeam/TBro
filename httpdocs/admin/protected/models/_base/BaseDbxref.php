<?php

/**
 * This is the model base class for the table "dbxref".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Dbxref".
 *
 * Columns in table "dbxref" available as properties of the model,
 * followed by relations of table "dbxref" available as properties of the model.
 *
 * @property integer $dbxref_id
 * @property integer $db_id
 * @property string $accession
 * @property string $version
 * @property string $description
 *
 * @property FeatureCvtermDbxref[] $featureCvtermDbxrefs
 * @property FeatureDbxref[] $featureDbxrefs
 * @property Protocol[] $protocols
 * @property Assay[] $assays
 * @property PubDbxref[] $pubDbxrefs
 * @property Feature[] $features
 * @property Db $db
 * @property Study[] $studies
 * @property OrganismDbxref[] $organismDbxrefs
 * @property Element[] $elements
 * @property Dbxrefprop[] $dbxrefprops
 * @property Cvterm[] $cvterms
 * @property CvtermDbxref[] $cvtermDbxrefs
 * @property Biomaterial[] $biomaterials
 * @property Arraydesign[] $arraydesigns
 * @property BiomaterialDbxref[] $biomaterialDbxrefs
 */
abstract class BaseDbxref extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'dbxref';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Dbxref|Dbxrefs', $n);
	}

	public static function representingColumn() {
		return 'accession';
	}

	public function rules() {
		return array(
			array('db_id, accession', 'required'),
			array('db_id', 'numerical', 'integerOnly'=>true),
			array('accession, version', 'length', 'max'=>255),
			array('description', 'safe'),
			array('version, description', 'default', 'setOnEmpty' => true, 'value' => null),
			array('dbxref_id, db_id, accession, version, description', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'featureCvtermDbxrefs' => array(self::HAS_MANY, 'FeatureCvtermDbxref', 'dbxref_id'),
			'featureDbxrefs' => array(self::HAS_MANY, 'FeatureDbxref', 'dbxref_id'),
			'protocols' => array(self::HAS_MANY, 'Protocol', 'dbxref_id'),
			'assays' => array(self::HAS_MANY, 'Assay', 'dbxref_id'),
			'pubDbxrefs' => array(self::HAS_MANY, 'PubDbxref', 'dbxref_id'),
			'features' => array(self::HAS_MANY, 'Feature', 'dbxref_id'),
			'db' => array(self::BELONGS_TO, 'Db', 'db_id'),
			'studies' => array(self::HAS_MANY, 'Study', 'dbxref_id'),
			'organismDbxrefs' => array(self::HAS_MANY, 'OrganismDbxref', 'dbxref_id'),
			'elements' => array(self::HAS_MANY, 'Element', 'dbxref_id'),
			'dbxrefprops' => array(self::HAS_MANY, 'Dbxrefprop', 'dbxref_id'),
			'cvterms' => array(self::HAS_MANY, 'Cvterm', 'dbxref_id'),
			'cvtermDbxrefs' => array(self::HAS_MANY, 'CvtermDbxref', 'dbxref_id'),
			'biomaterials' => array(self::HAS_MANY, 'Biomaterial', 'dbxref_id'),
			'arraydesigns' => array(self::HAS_MANY, 'Arraydesign', 'dbxref_id'),
			'biomaterialDbxrefs' => array(self::HAS_MANY, 'BiomaterialDbxref', 'dbxref_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'dbxref_id' => Yii::t('app', 'Dbxref'),
			'db_id' => null,
			'accession' => Yii::t('app', 'Accession'),
			'version' => Yii::t('app', 'Version'),
			'description' => Yii::t('app', 'Description'),
			'featureCvtermDbxrefs' => null,
			'featureDbxrefs' => null,
			'protocols' => null,
			'assays' => null,
			'pubDbxrefs' => null,
			'features' => null,
			'db' => null,
			'studies' => null,
			'organismDbxrefs' => null,
			'elements' => null,
			'dbxrefprops' => null,
			'cvterms' => null,
			'cvtermDbxrefs' => null,
			'biomaterials' => null,
			'arraydesigns' => null,
			'biomaterialDbxrefs' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('dbxref_id', $this->dbxref_id);
		$criteria->compare('db_id', $this->db_id);
		$criteria->compare('accession', $this->accession, true);
		$criteria->compare('version', $this->version, true);
		$criteria->compare('description', $this->description, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}