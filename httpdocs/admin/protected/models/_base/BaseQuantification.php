<?php

/**
 * This is the model base class for the table "quantification".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Quantification".
 *
 * Columns in table "quantification" available as properties of the model,
 * followed by relations of table "quantification" available as properties of the model.
 *
 * @property integer $quantification_id
 * @property integer $acquisition_id
 * @property integer $operator_id
 * @property integer $protocol_id
 * @property integer $analysis_id
 * @property string $quantificationdate
 * @property string $name
 * @property string $uri
 *
 * @property Elementresult[] $elementresults
 * @property Quantificationresult[] $quantificationresults
 * @property Acquisition $acquisition
 * @property Analysis $analysis
 * @property Contact $operator
 * @property Protocol $protocol
 * @property QuantificationRelationship[] $quantificationRelationships
 * @property QuantificationRelationship[] $quantificationRelationships1
 * @property Quantificationprop[] $quantificationprops
 */
abstract class BaseQuantification extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'quantification';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Quantification|Quantifications', $n);
	}

	public static function representingColumn() {
		return 'quantificationdate';
	}

	public function rules() {
		return array(
			array('acquisition_id, analysis_id', 'required'),
			array('acquisition_id, operator_id, protocol_id, analysis_id', 'numerical', 'integerOnly'=>true),
			array('quantificationdate, name, uri', 'safe'),
			array('operator_id, protocol_id, quantificationdate, name, uri', 'default', 'setOnEmpty' => true, 'value' => null),
			array('quantification_id, acquisition_id, operator_id, protocol_id, analysis_id, quantificationdate, name, uri', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'elementresults' => array(self::HAS_MANY, 'Elementresult', 'quantification_id'),
			'quantificationresults' => array(self::HAS_MANY, 'Quantificationresult', 'quantification_id'),
			'acquisition' => array(self::BELONGS_TO, 'Acquisition', 'acquisition_id'),
			'analysis' => array(self::BELONGS_TO, 'Analysis', 'analysis_id'),
			'operator' => array(self::BELONGS_TO, 'Contact', 'operator_id'),
			'protocol' => array(self::BELONGS_TO, 'Protocol', 'protocol_id'),
			'quantificationRelationships' => array(self::HAS_MANY, 'QuantificationRelationship', 'object_id'),
			'quantificationRelationships1' => array(self::HAS_MANY, 'QuantificationRelationship', 'subject_id'),
			'quantificationprops' => array(self::HAS_MANY, 'Quantificationprop', 'quantification_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'quantification_id' => Yii::t('app', 'Quantification'),
			'acquisition_id' => null,
			'operator_id' => null,
			'protocol_id' => null,
			'analysis_id' => null,
			'quantificationdate' => Yii::t('app', 'Quantificationdate'),
			'name' => Yii::t('app', 'Name'),
			'uri' => Yii::t('app', 'Uri'),
			'elementresults' => null,
			'quantificationresults' => null,
			'acquisition' => null,
			'analysis' => null,
			'operator' => null,
			'protocol' => null,
			'quantificationRelationships' => null,
			'quantificationRelationships1' => null,
			'quantificationprops' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('quantification_id', $this->quantification_id);
		$criteria->compare('acquisition_id', $this->acquisition_id);
		$criteria->compare('operator_id', $this->operator_id);
		$criteria->compare('protocol_id', $this->protocol_id);
		$criteria->compare('analysis_id', $this->analysis_id);
		$criteria->compare('quantificationdate', $this->quantificationdate, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('uri', $this->uri, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}