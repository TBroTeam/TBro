<?php

/**
 * This is the model base class for the table "protocol".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Protocol".
 *
 * Columns in table "protocol" available as properties of the model,
 * followed by relations of table "protocol" available as properties of the model.
 *
 * @property integer $protocol_id
 * @property integer $type_id
 * @property integer $pub_id
 * @property integer $dbxref_id
 * @property string $name
 * @property string $uri
 * @property string $protocoldescription
 * @property string $hardwaredescription
 * @property string $softwaredescription
 *
 * @property Dbxref $dbxref
 * @property Pub $pub
 * @property Cvterm $type
 * @property Assay[] $assays
 * @property Acquisition[] $acquisitions
 * @property Treatment[] $treatments
 * @property Protocolparam[] $protocolparams
 * @property Quantification[] $quantifications
 * @property Arraydesign[] $arraydesigns
 */
abstract class BaseProtocol extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'protocol';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Protocol|Protocols', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('type_id, name', 'required'),
			array('type_id, pub_id, dbxref_id', 'numerical', 'integerOnly'=>true),
			array('uri, protocoldescription, hardwaredescription, softwaredescription', 'safe'),
			array('pub_id, dbxref_id, uri, protocoldescription, hardwaredescription, softwaredescription', 'default', 'setOnEmpty' => true, 'value' => null),
			array('protocol_id, type_id, pub_id, dbxref_id, name, uri, protocoldescription, hardwaredescription, softwaredescription', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'dbxref' => array(self::BELONGS_TO, 'Dbxref', 'dbxref_id'),
			'pub' => array(self::BELONGS_TO, 'Pub', 'pub_id'),
			'type' => array(self::BELONGS_TO, 'Cvterm', 'type_id'),
			'assays' => array(self::HAS_MANY, 'Assay', 'protocol_id'),
			'acquisitions' => array(self::HAS_MANY, 'Acquisition', 'protocol_id'),
			'treatments' => array(self::HAS_MANY, 'Treatment', 'protocol_id'),
			'protocolparams' => array(self::HAS_MANY, 'Protocolparam', 'protocol_id'),
			'quantifications' => array(self::HAS_MANY, 'Quantification', 'protocol_id'),
			'arraydesigns' => array(self::HAS_MANY, 'Arraydesign', 'protocol_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'protocol_id' => Yii::t('app', 'Protocol'),
			'type_id' => null,
			'pub_id' => null,
			'dbxref_id' => null,
			'name' => Yii::t('app', 'Name'),
			'uri' => Yii::t('app', 'Uri'),
			'protocoldescription' => Yii::t('app', 'Protocoldescription'),
			'hardwaredescription' => Yii::t('app', 'Hardwaredescription'),
			'softwaredescription' => Yii::t('app', 'Softwaredescription'),
			'dbxref' => null,
			'pub' => null,
			'type' => null,
			'assays' => null,
			'acquisitions' => null,
			'treatments' => null,
			'protocolparams' => null,
			'quantifications' => null,
			'arraydesigns' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('protocol_id', $this->protocol_id);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('pub_id', $this->pub_id);
		$criteria->compare('dbxref_id', $this->dbxref_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('uri', $this->uri, true);
		$criteria->compare('protocoldescription', $this->protocoldescription, true);
		$criteria->compare('hardwaredescription', $this->hardwaredescription, true);
		$criteria->compare('softwaredescription', $this->softwaredescription, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}