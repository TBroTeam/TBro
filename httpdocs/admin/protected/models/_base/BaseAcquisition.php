<?php

/**
 * This is the model base class for the table "acquisition".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Acquisition".
 *
 * Columns in table "acquisition" available as properties of the model,
 * followed by relations of table "acquisition" available as properties of the model.
 *
 * @property integer $acquisition_id
 * @property integer $assay_id
 * @property integer $protocol_id
 * @property integer $channel_id
 * @property string $acquisitiondate
 * @property string $name
 * @property string $uri
 *
 * @property Assay $assay
 * @property Channel $channel
 * @property Protocol $protocol
 * @property Acquisitionprop[] $acquisitionprops
 * @property AcquisitionRelationship[] $acquisitionRelationships
 * @property AcquisitionRelationship[] $acquisitionRelationships1
 * @property Quantification[] $quantifications
 */
abstract class BaseAcquisition extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'acquisition';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Acquisition|Acquisitions', $n);
	}

	public static function representingColumn() {
		return 'acquisitiondate';
	}

	public function rules() {
		return array(
			array('assay_id', 'required'),
			array('assay_id, protocol_id, channel_id', 'numerical', 'integerOnly'=>true),
			array('acquisitiondate, name, uri', 'safe'),
			array('protocol_id, channel_id, acquisitiondate, name, uri', 'default', 'setOnEmpty' => true, 'value' => null),
			array('acquisition_id, assay_id, protocol_id, channel_id, acquisitiondate, name, uri', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'assay' => array(self::BELONGS_TO, 'Assay', 'assay_id'),
			'channel' => array(self::BELONGS_TO, 'Channel', 'channel_id'),
			'protocol' => array(self::BELONGS_TO, 'Protocol', 'protocol_id'),
			'acquisitionprops' => array(self::HAS_MANY, 'Acquisitionprop', 'acquisition_id'),
			'acquisitionRelationships' => array(self::HAS_MANY, 'AcquisitionRelationship', 'object_id'),
			'acquisitionRelationships1' => array(self::HAS_MANY, 'AcquisitionRelationship', 'subject_id'),
			'quantifications' => array(self::HAS_MANY, 'Quantification', 'acquisition_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'acquisition_id' => Yii::t('app', 'Acquisition'),
			'assay_id' => null,
			'protocol_id' => null,
			'channel_id' => null,
			'acquisitiondate' => Yii::t('app', 'Acquisitiondate'),
			'name' => Yii::t('app', 'Name'),
			'uri' => Yii::t('app', 'Uri'),
			'assay' => null,
			'channel' => null,
			'protocol' => null,
			'acquisitionprops' => null,
			'acquisitionRelationships' => null,
			'acquisitionRelationships1' => null,
			'quantifications' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('acquisition_id', $this->acquisition_id);
		$criteria->compare('assay_id', $this->assay_id);
		$criteria->compare('protocol_id', $this->protocol_id);
		$criteria->compare('channel_id', $this->channel_id);
		$criteria->compare('acquisitiondate', $this->acquisitiondate, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('uri', $this->uri, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}