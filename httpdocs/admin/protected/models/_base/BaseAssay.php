<?php

/**
 * This is the model base class for the table "assay".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Assay".
 *
 * Columns in table "assay" available as properties of the model,
 * followed by relations of table "assay" available as properties of the model.
 *
 * @property integer $assay_id
 * @property integer $arraydesign_id
 * @property integer $protocol_id
 * @property string $assaydate
 * @property string $arrayidentifier
 * @property string $arraybatchidentifier
 * @property integer $operator_id
 * @property integer $dbxref_id
 * @property string $name
 * @property string $description
 *
 * @property StudyAssay[] $studyAssays
 * @property Arraydesign $arraydesign
 * @property Dbxref $dbxref
 * @property Contact $operator
 * @property Protocol $protocol
 * @property Acquisition[] $acquisitions
 * @property Studyfactorvalue[] $studyfactorvalues
 * @property Control[] $controls
 * @property AssayProject[] $assayProjects
 * @property Assayprop[] $assayprops
 * @property AssayBiomaterial[] $assayBiomaterials
 */
abstract class BaseAssay extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'assay';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Assay|Assays', $n);
	}

	public static function representingColumn() {
		return 'assaydate';
	}

	public function rules() {
		return array(
			array('arraydesign_id, operator_id', 'required'),
			array('arraydesign_id, protocol_id, operator_id, dbxref_id', 'numerical', 'integerOnly'=>true),
			array('assaydate, arrayidentifier, arraybatchidentifier, name, description', 'safe'),
			array('protocol_id, assaydate, arrayidentifier, arraybatchidentifier, dbxref_id, name, description', 'default', 'setOnEmpty' => true, 'value' => null),
			array('assay_id, arraydesign_id, protocol_id, assaydate, arrayidentifier, arraybatchidentifier, operator_id, dbxref_id, name, description', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'studyAssays' => array(self::HAS_MANY, 'StudyAssay', 'assay_id'),
			'arraydesign' => array(self::BELONGS_TO, 'Arraydesign', 'arraydesign_id'),
			'dbxref' => array(self::BELONGS_TO, 'Dbxref', 'dbxref_id'),
			'operator' => array(self::BELONGS_TO, 'Contact', 'operator_id'),
			'protocol' => array(self::BELONGS_TO, 'Protocol', 'protocol_id'),
			'acquisitions' => array(self::HAS_MANY, 'Acquisition', 'assay_id'),
			'studyfactorvalues' => array(self::HAS_MANY, 'Studyfactorvalue', 'assay_id'),
			'controls' => array(self::HAS_MANY, 'Control', 'assay_id'),
			'assayProjects' => array(self::HAS_MANY, 'AssayProject', 'assay_id'),
			'assayprops' => array(self::HAS_MANY, 'Assayprop', 'assay_id'),
			'assayBiomaterials' => array(self::HAS_MANY, 'AssayBiomaterial', 'assay_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'assay_id' => Yii::t('app', 'Assay'),
			'arraydesign_id' => null,
			'protocol_id' => null,
			'assaydate' => Yii::t('app', 'Assaydate'),
			'arrayidentifier' => Yii::t('app', 'Arrayidentifier'),
			'arraybatchidentifier' => Yii::t('app', 'Arraybatchidentifier'),
			'operator_id' => null,
			'dbxref_id' => null,
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'studyAssays' => null,
			'arraydesign' => null,
			'dbxref' => null,
			'operator' => null,
			'protocol' => null,
			'acquisitions' => null,
			'studyfactorvalues' => null,
			'controls' => null,
			'assayProjects' => null,
			'assayprops' => null,
			'assayBiomaterials' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('assay_id', $this->assay_id);
		$criteria->compare('arraydesign_id', $this->arraydesign_id);
		$criteria->compare('protocol_id', $this->protocol_id);
		$criteria->compare('assaydate', $this->assaydate, true);
		$criteria->compare('arrayidentifier', $this->arrayidentifier, true);
		$criteria->compare('arraybatchidentifier', $this->arraybatchidentifier, true);
		$criteria->compare('operator_id', $this->operator_id);
		$criteria->compare('dbxref_id', $this->dbxref_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}