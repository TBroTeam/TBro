<?php

/**
 * This is the model base class for the table "arraydesign".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Arraydesign".
 *
 * Columns in table "arraydesign" available as properties of the model,
 * followed by relations of table "arraydesign" available as properties of the model.
 *
 * @property integer $arraydesign_id
 * @property integer $manufacturer_id
 * @property integer $platformtype_id
 * @property integer $substratetype_id
 * @property integer $protocol_id
 * @property integer $dbxref_id
 * @property string $name
 * @property string $version
 * @property string $description
 * @property string $array_dimensions
 * @property string $element_dimensions
 * @property integer $num_of_elements
 * @property integer $num_array_columns
 * @property integer $num_array_rows
 * @property integer $num_grid_columns
 * @property integer $num_grid_rows
 * @property integer $num_sub_columns
 * @property integer $num_sub_rows
 *
 * @property Assay[] $assays
 * @property Element[] $elements
 * @property Dbxref $dbxref
 * @property Contact $manufacturer
 * @property Cvterm $platformtype
 * @property Protocol $protocol
 * @property Cvterm $substratetype
 * @property Arraydesignprop[] $arraydesignprops
 */
abstract class BaseArraydesign extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'arraydesign';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Arraydesign|Arraydesigns', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('manufacturer_id, platformtype_id, name', 'required'),
			array('manufacturer_id, platformtype_id, substratetype_id, protocol_id, dbxref_id, num_of_elements, num_array_columns, num_array_rows, num_grid_columns, num_grid_rows, num_sub_columns, num_sub_rows', 'numerical', 'integerOnly'=>true),
			array('version, description, array_dimensions, element_dimensions', 'safe'),
			array('substratetype_id, protocol_id, dbxref_id, version, description, array_dimensions, element_dimensions, num_of_elements, num_array_columns, num_array_rows, num_grid_columns, num_grid_rows, num_sub_columns, num_sub_rows', 'default', 'setOnEmpty' => true, 'value' => null),
			array('arraydesign_id, manufacturer_id, platformtype_id, substratetype_id, protocol_id, dbxref_id, name, version, description, array_dimensions, element_dimensions, num_of_elements, num_array_columns, num_array_rows, num_grid_columns, num_grid_rows, num_sub_columns, num_sub_rows', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'assays' => array(self::HAS_MANY, 'Assay', 'arraydesign_id'),
			'elements' => array(self::HAS_MANY, 'Element', 'arraydesign_id'),
			'dbxref' => array(self::BELONGS_TO, 'Dbxref', 'dbxref_id'),
			'manufacturer' => array(self::BELONGS_TO, 'Contact', 'manufacturer_id'),
			'platformtype' => array(self::BELONGS_TO, 'Cvterm', 'platformtype_id'),
			'protocol' => array(self::BELONGS_TO, 'Protocol', 'protocol_id'),
			'substratetype' => array(self::BELONGS_TO, 'Cvterm', 'substratetype_id'),
			'arraydesignprops' => array(self::HAS_MANY, 'Arraydesignprop', 'arraydesign_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'arraydesign_id' => Yii::t('app', 'Arraydesign'),
			'manufacturer_id' => null,
			'platformtype_id' => null,
			'substratetype_id' => null,
			'protocol_id' => null,
			'dbxref_id' => null,
			'name' => Yii::t('app', 'Name'),
			'version' => Yii::t('app', 'Version'),
			'description' => Yii::t('app', 'Description'),
			'array_dimensions' => Yii::t('app', 'Array Dimensions'),
			'element_dimensions' => Yii::t('app', 'Element Dimensions'),
			'num_of_elements' => Yii::t('app', 'Num Of Elements'),
			'num_array_columns' => Yii::t('app', 'Num Array Columns'),
			'num_array_rows' => Yii::t('app', 'Num Array Rows'),
			'num_grid_columns' => Yii::t('app', 'Num Grid Columns'),
			'num_grid_rows' => Yii::t('app', 'Num Grid Rows'),
			'num_sub_columns' => Yii::t('app', 'Num Sub Columns'),
			'num_sub_rows' => Yii::t('app', 'Num Sub Rows'),
			'assays' => null,
			'elements' => null,
			'dbxref' => null,
			'manufacturer' => null,
			'platformtype' => null,
			'protocol' => null,
			'substratetype' => null,
			'arraydesignprops' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('arraydesign_id', $this->arraydesign_id);
		$criteria->compare('manufacturer_id', $this->manufacturer_id);
		$criteria->compare('platformtype_id', $this->platformtype_id);
		$criteria->compare('substratetype_id', $this->substratetype_id);
		$criteria->compare('protocol_id', $this->protocol_id);
		$criteria->compare('dbxref_id', $this->dbxref_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('version', $this->version, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('array_dimensions', $this->array_dimensions, true);
		$criteria->compare('element_dimensions', $this->element_dimensions, true);
		$criteria->compare('num_of_elements', $this->num_of_elements);
		$criteria->compare('num_array_columns', $this->num_array_columns);
		$criteria->compare('num_array_rows', $this->num_array_rows);
		$criteria->compare('num_grid_columns', $this->num_grid_columns);
		$criteria->compare('num_grid_rows', $this->num_grid_rows);
		$criteria->compare('num_sub_columns', $this->num_sub_columns);
		$criteria->compare('num_sub_rows', $this->num_sub_rows);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}