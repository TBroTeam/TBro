<?php

/**
 * This is the model base class for the table "expressionresult".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Expressionresult".
 *
 * Columns in table "expressionresult" available as properties of the model,
 * followed by relations of table "expressionresult" available as properties of the model.
 *
 * @property integer $expressionresult_id
 * @property integer $analysis_id
 * @property double $baseMean
 * @property double $baseMeanA
 * @property double $baseMeanB
 * @property double $foldChange
 * @property double $log2foldChange
 * @property double $pval
 * @property double $pvaladj
 *
 * @property ExpressionresultQuantificationresult[] $expressionresultQuantificationresults
 * @property Analysis $analysis
 */
abstract class BaseExpressionresult extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'expressionresult';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Expressionresult|Expressionresults', $n);
	}

	public static function representingColumn() {
		return 'expressionresult_id';
	}

	public function rules() {
		return array(
			array('analysis_id', 'numerical', 'integerOnly'=>true),
			array('baseMean, baseMeanA, baseMeanB, foldChange, log2foldChange, pval, pvaladj', 'numerical'),
			array('analysis_id, baseMean, baseMeanA, baseMeanB, foldChange, log2foldChange, pval, pvaladj', 'default', 'setOnEmpty' => true, 'value' => null),
			array('expressionresult_id, analysis_id, baseMean, baseMeanA, baseMeanB, foldChange, log2foldChange, pval, pvaladj', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'expressionresultQuantificationresults' => array(self::HAS_MANY, 'ExpressionresultQuantificationresult', 'expressionresult_id'),
			'analysis' => array(self::BELONGS_TO, 'Analysis', 'analysis_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'expressionresult_id' => Yii::t('app', 'Expressionresult'),
			'analysis_id' => null,
			'baseMean' => Yii::t('app', 'Base Mean'),
			'baseMeanA' => Yii::t('app', 'Base Mean A'),
			'baseMeanB' => Yii::t('app', 'Base Mean B'),
			'foldChange' => Yii::t('app', 'Fold Change'),
			'log2foldChange' => Yii::t('app', 'Log2fold Change'),
			'pval' => Yii::t('app', 'Pval'),
			'pvaladj' => Yii::t('app', 'Pvaladj'),
			'expressionresultQuantificationresults' => null,
			'analysis' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('expressionresult_id', $this->expressionresult_id);
		$criteria->compare('analysis_id', $this->analysis_id);
		$criteria->compare('baseMean', $this->baseMean);
		$criteria->compare('baseMeanA', $this->baseMeanA);
		$criteria->compare('baseMeanB', $this->baseMeanB);
		$criteria->compare('foldChange', $this->foldChange);
		$criteria->compare('log2foldChange', $this->log2foldChange);
		$criteria->compare('pval', $this->pval);
		$criteria->compare('pvaladj', $this->pvaladj);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}