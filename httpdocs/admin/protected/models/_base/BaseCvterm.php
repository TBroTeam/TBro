<?php

/**
 * This is the model base class for the table "cvterm".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Cvterm".
 *
 * Columns in table "cvterm" available as properties of the model,
 * followed by relations of table "cvterm" available as properties of the model.
 *
 * @property integer $cvterm_id
 * @property integer $cv_id
 * @property string $name
 * @property string $definition
 * @property integer $dbxref_id
 * @property integer $is_obsolete
 * @property integer $is_relationshiptype
 *
 * @property ElementresultRelationship[] $elementresultRelationships
 * @property FeatureRelationshipprop[] $featureRelationshipprops
 * @property FeaturePubprop[] $featurePubprops
 * @property FeatureCvtermprop[] $featureCvtermprops
 * @property ElementRelationship[] $elementRelationships
 * @property Featureprop[] $featureprops
 * @property Protocol[] $protocols
 * @property Chadoprop[] $chadoprops
 * @property Biomaterialprop[] $biomaterialprops
 * @property Analysisprop[] $analysisprops
 * @property Acquisitionprop[] $acquisitionprops
 * @property AcquisitionRelationship[] $acquisitionRelationships
 * @property Treatment[] $treatments
 * @property Feature[] $features
 * @property StudypropFeature[] $studypropFeatures
 * @property Quantificationresult[] $quantificationresults
 * @property Synonym[] $synonyms
 * @property Studyfactor[] $studyfactors
 * @property Studyprop[] $studyprops
 * @property Studydesignprop[] $studydesignprops
 * @property WebuserData[] $webuserDatas
 * @property Pub[] $pubs
 * @property Protocolparam[] $protocolparams
 * @property Protocolparam[] $protocolparams1
 * @property Organismprop[] $organismprops
 * @property QuantificationRelationship[] $quantificationRelationships
 * @property Pubprop[] $pubprops
 * @property ProjectRelationship[] $projectRelationships
 * @property PubRelationship[] $pubRelationships
 * @property Quantificationprop[] $quantificationprops
 * @property Projectprop[] $projectprops
 * @property FeatureRelationship[] $featureRelationships
 * @property FeatureCvterm[] $featureCvterms
 * @property Element[] $elements
 * @property Dbxrefprop[] $dbxrefprops
 * @property Cvtermpath[] $cvtermpaths
 * @property Cvtermpath[] $cvtermpaths1
 * @property Cvtermpath[] $cvtermpaths2
 * @property CvtermRelationship[] $cvtermRelationships
 * @property CvtermRelationship[] $cvtermRelationships1
 * @property CvtermRelationship[] $cvtermRelationships2
 * @property ContactRelationship[] $contactRelationships
 * @property Cvtermsynonym[] $cvtermsynonyms
 * @property Cvtermsynonym[] $cvtermsynonyms1
 * @property Cvtermprop[] $cvtermprops
 * @property Cvtermprop[] $cvtermprops1
 * @property Control[] $controls
 * @property Cvprop[] $cvprops
 * @property Cv $cv
 * @property Dbxref $dbxref
 * @property CvtermDbxref[] $cvtermDbxrefs
 * @property Contact[] $contacts
 * @property BiomaterialTreatment[] $biomaterialTreatments
 * @property Arraydesign[] $arraydesigns
 * @property Arraydesign[] $arraydesigns1
 * @property BiomaterialRelationship[] $biomaterialRelationships
 * @property Assayprop[] $assayprops
 * @property Arraydesignprop[] $arraydesignprops
 * @property Analysisfeatureprop[] $analysisfeatureprops
 */
abstract class BaseCvterm extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'cvterm';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Cvterm|Cvterms', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('cv_id, name, dbxref_id', 'required'),
			array('cv_id, dbxref_id, is_obsolete, is_relationshiptype', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>1024),
			array('definition', 'safe'),
			array('definition, is_obsolete, is_relationshiptype', 'default', 'setOnEmpty' => true, 'value' => null),
			array('cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'elementresultRelationships' => array(self::HAS_MANY, 'ElementresultRelationship', 'type_id'),
			'featureRelationshipprops' => array(self::HAS_MANY, 'FeatureRelationshipprop', 'type_id'),
			'featurePubprops' => array(self::HAS_MANY, 'FeaturePubprop', 'type_id'),
			'featureCvtermprops' => array(self::HAS_MANY, 'FeatureCvtermprop', 'type_id'),
			'elementRelationships' => array(self::HAS_MANY, 'ElementRelationship', 'type_id'),
			'featureprops' => array(self::HAS_MANY, 'Featureprop', 'type_id'),
			'protocols' => array(self::HAS_MANY, 'Protocol', 'type_id'),
			'chadoprops' => array(self::HAS_MANY, 'Chadoprop', 'type_id'),
			'biomaterialprops' => array(self::HAS_MANY, 'Biomaterialprop', 'type_id'),
			'analysisprops' => array(self::HAS_MANY, 'Analysisprop', 'type_id'),
			'acquisitionprops' => array(self::HAS_MANY, 'Acquisitionprop', 'type_id'),
			'acquisitionRelationships' => array(self::HAS_MANY, 'AcquisitionRelationship', 'type_id'),
			'treatments' => array(self::HAS_MANY, 'Treatment', 'type_id'),
			'features' => array(self::HAS_MANY, 'Feature', 'type_id'),
			'studypropFeatures' => array(self::HAS_MANY, 'StudypropFeature', 'type_id'),
			'quantificationresults' => array(self::HAS_MANY, 'Quantificationresult', 'type_id'),
			'synonyms' => array(self::HAS_MANY, 'Synonym', 'type_id'),
			'studyfactors' => array(self::HAS_MANY, 'Studyfactor', 'type_id'),
			'studyprops' => array(self::HAS_MANY, 'Studyprop', 'type_id'),
			'studydesignprops' => array(self::HAS_MANY, 'Studydesignprop', 'type_id'),
			'webuserDatas' => array(self::HAS_MANY, 'WebuserData', 'type_id'),
			'pubs' => array(self::HAS_MANY, 'Pub', 'type_id'),
			'protocolparams' => array(self::HAS_MANY, 'Protocolparam', 'datatype_id'),
			'protocolparams1' => array(self::HAS_MANY, 'Protocolparam', 'unittype_id'),
			'organismprops' => array(self::HAS_MANY, 'Organismprop', 'type_id'),
			'quantificationRelationships' => array(self::HAS_MANY, 'QuantificationRelationship', 'type_id'),
			'pubprops' => array(self::HAS_MANY, 'Pubprop', 'type_id'),
			'projectRelationships' => array(self::HAS_MANY, 'ProjectRelationship', 'type_id'),
			'pubRelationships' => array(self::HAS_MANY, 'PubRelationship', 'type_id'),
			'quantificationprops' => array(self::HAS_MANY, 'Quantificationprop', 'type_id'),
			'projectprops' => array(self::HAS_MANY, 'Projectprop', 'type_id'),
			'featureRelationships' => array(self::HAS_MANY, 'FeatureRelationship', 'type_id'),
			'featureCvterms' => array(self::HAS_MANY, 'FeatureCvterm', 'cvterm_id'),
			'elements' => array(self::HAS_MANY, 'Element', 'type_id'),
			'dbxrefprops' => array(self::HAS_MANY, 'Dbxrefprop', 'type_id'),
			'cvtermpaths' => array(self::HAS_MANY, 'Cvtermpath', 'object_id'),
			'cvtermpaths1' => array(self::HAS_MANY, 'Cvtermpath', 'subject_id'),
			'cvtermpaths2' => array(self::HAS_MANY, 'Cvtermpath', 'type_id'),
			'cvtermRelationships' => array(self::HAS_MANY, 'CvtermRelationship', 'object_id'),
			'cvtermRelationships1' => array(self::HAS_MANY, 'CvtermRelationship', 'subject_id'),
			'cvtermRelationships2' => array(self::HAS_MANY, 'CvtermRelationship', 'type_id'),
			'contactRelationships' => array(self::HAS_MANY, 'ContactRelationship', 'type_id'),
			'cvtermsynonyms' => array(self::HAS_MANY, 'Cvtermsynonym', 'cvterm_id'),
			'cvtermsynonyms1' => array(self::HAS_MANY, 'Cvtermsynonym', 'type_id'),
			'cvtermprops' => array(self::HAS_MANY, 'Cvtermprop', 'cvterm_id'),
			'cvtermprops1' => array(self::HAS_MANY, 'Cvtermprop', 'type_id'),
			'controls' => array(self::HAS_MANY, 'Control', 'type_id'),
			'cvprops' => array(self::HAS_MANY, 'Cvprop', 'type_id'),
			'cv' => array(self::BELONGS_TO, 'Cv', 'cv_id'),
			'dbxref' => array(self::BELONGS_TO, 'Dbxref', 'dbxref_id'),
			'cvtermDbxrefs' => array(self::HAS_MANY, 'CvtermDbxref', 'cvterm_id'),
			'contacts' => array(self::HAS_MANY, 'Contact', 'type_id'),
			'biomaterialTreatments' => array(self::HAS_MANY, 'BiomaterialTreatment', 'unittype_id'),
			'arraydesigns' => array(self::HAS_MANY, 'Arraydesign', 'platformtype_id'),
			'arraydesigns1' => array(self::HAS_MANY, 'Arraydesign', 'substratetype_id'),
			'biomaterialRelationships' => array(self::HAS_MANY, 'BiomaterialRelationship', 'type_id'),
			'assayprops' => array(self::HAS_MANY, 'Assayprop', 'type_id'),
			'arraydesignprops' => array(self::HAS_MANY, 'Arraydesignprop', 'type_id'),
			'analysisfeatureprops' => array(self::HAS_MANY, 'Analysisfeatureprop', 'type_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'cvterm_id' => Yii::t('app', 'Cvterm'),
			'cv_id' => null,
			'name' => Yii::t('app', 'Name'),
			'definition' => Yii::t('app', 'Definition'),
			'dbxref_id' => null,
			'is_obsolete' => Yii::t('app', 'Is Obsolete'),
			'is_relationshiptype' => Yii::t('app', 'Is Relationshiptype'),
			'elementresultRelationships' => null,
			'featureRelationshipprops' => null,
			'featurePubprops' => null,
			'featureCvtermprops' => null,
			'elementRelationships' => null,
			'featureprops' => null,
			'protocols' => null,
			'chadoprops' => null,
			'biomaterialprops' => null,
			'analysisprops' => null,
			'acquisitionprops' => null,
			'acquisitionRelationships' => null,
			'treatments' => null,
			'features' => null,
			'studypropFeatures' => null,
			'quantificationresults' => null,
			'synonyms' => null,
			'studyfactors' => null,
			'studyprops' => null,
			'studydesignprops' => null,
			'webuserDatas' => null,
			'pubs' => null,
			'protocolparams' => null,
			'protocolparams1' => null,
			'organismprops' => null,
			'quantificationRelationships' => null,
			'pubprops' => null,
			'projectRelationships' => null,
			'pubRelationships' => null,
			'quantificationprops' => null,
			'projectprops' => null,
			'featureRelationships' => null,
			'featureCvterms' => null,
			'elements' => null,
			'dbxrefprops' => null,
			'cvtermpaths' => null,
			'cvtermpaths1' => null,
			'cvtermpaths2' => null,
			'cvtermRelationships' => null,
			'cvtermRelationships1' => null,
			'cvtermRelationships2' => null,
			'contactRelationships' => null,
			'cvtermsynonyms' => null,
			'cvtermsynonyms1' => null,
			'cvtermprops' => null,
			'cvtermprops1' => null,
			'controls' => null,
			'cvprops' => null,
			'cv' => null,
			'dbxref' => null,
			'cvtermDbxrefs' => null,
			'contacts' => null,
			'biomaterialTreatments' => null,
			'arraydesigns' => null,
			'arraydesigns1' => null,
			'biomaterialRelationships' => null,
			'assayprops' => null,
			'arraydesignprops' => null,
			'analysisfeatureprops' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('cvterm_id', $this->cvterm_id);
		$criteria->compare('cv_id', $this->cv_id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('definition', $this->definition, true);
		$criteria->compare('dbxref_id', $this->dbxref_id);
		$criteria->compare('is_obsolete', $this->is_obsolete);
		$criteria->compare('is_relationshiptype', $this->is_relationshiptype);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}